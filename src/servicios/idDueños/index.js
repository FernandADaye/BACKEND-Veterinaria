// aqui es donde comienza la estructura buena 
class idDue√±os {
    constructor () {
        this.idDue√±os = []
        this.generadorData();
        
    }
    //‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï es como si aqu√≠ estubier√° la BD (sigamos fingiendo )‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï‚ùå‚≠ï
    generadorData() {
            this.idDue√±os = [
                { id: 1, nombre: "Day√©", mascota: "gato" },
                { id: 2, nombre: "Azul ", mascota: "rat√≥n" },
                { id: 3, nombre: "Erika ", mascota: "perro" },
                { id: 4, nombre: "Leyla", mascota: "mapache " },
                { id: 5, nombre: "Levi ", mascota: "conejo " },
            ];
        }

    // aqui se encontraran todos los endpoints que se usar√°n  (un poco diferentes, pero hacen lo mismmo )
// en este caso, como es un array, los metodos que se usan para sacar, meter, medificar o borrar informacion son diferentes a como se usar√≠a realmente en una BD
    //üíú get 
        getDue√±os (){
            return this.idDue√±os
            
        }

    //üíú post
        crearnuevaInfo (nuevaInfo){
            this.idDue√±os.push(nuevaInfo);
        }

    //üíú patch  
        modificacion (idModificado,nuevaInfo ){
            const posicion = this.idDue√±os.findIndex(idDue√±o=> idDue√±o.id===parseInt(idModificado));
            this.idDue√±os[posicion] = { ...this.idDue√±os[posicion], ...nuevaInfo };
        }

    //üíú delete
        borrarInfo (idBorrado){
            const posicion = this.idDue√±os.findIndex(idDue√±o=> idDue√±o.id===parseInt(idBorrado));
            this.idDue√±os.splice(posicion, 1);
        }
    }

    module.exports = { idDue√±os }


    // los servicios manejan los datos 